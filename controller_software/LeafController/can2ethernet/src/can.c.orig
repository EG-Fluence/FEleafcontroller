#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include <net/if.h>
#include <sys/ioctl.h>
#include <sys/socket.h>

#include <linux/can.h>
#include <linux/can/raw.h>
#include <errno.h>

#include "Log.hxx"

int initialize_can_sender() {

    int s = socket(PF_CAN, SOCK_RAW, CAN_RAW);
    if (s < 0) {
        merr("socket:" +strerror(errno));
        exit(1);
    }
    return s;
}

int initialize_can_receiver(struct sockaddr_can addr) {
    int sock = socket(PF_CAN, SOCK_RAW, CAN_RAW);
    if (sock < 0) {
        merr("socket:" + strerror(errno));
        exit(1);
    }

    if (bind(sock, (struct sockaddr *)&addr, sizeof(addr)) < 0) {
        merr("bind:" + strerror(errno));
        exit(1);
    }

    return sock;
}

int can_receive(int sock, struct msghdr& msg) {

    int nbytes = recvmsg(sock, &msg, 0);

    if (nbytes < 0) {
        merr("read:" + strerror(errno));
        exit(1); // TODO
    }
    return nbytes;

}

int can_send(struct sockaddr_can addr) {
	
	struct ifreq ifr;
	
	strncpy(ifr.ifr_name, "can0", IFNAMSIZ - 1);
	ifr.ifr_name[IFNAMSIZ - 1] = '\0';
	ifr.ifr_ifindex = if_nametoindex(ifr.ifr_name);
	if (!ifr.ifr_ifindex) {
		perror("if_nametoindex");
		return 1;
	}

	memset(&addr, 0, sizeof(addr));
	addr.can_family = AF_CAN;
	addr.can_ifindex = ifr.ifr_ifindex;
	
			if (setsockopt(s, SOL_CAN_RAW, CAN_RAW_FD_FRAMES,
			       &enable_canfd, sizeof(enable_canfd))){
			printf("error when enabling CAN FD support\n");
			return 1;
		}
		setsockopt(s, SOL_CAN_RAW, CAN_RAW_FILTER, NULL, 0);
		
			if (bind(s, (struct sockaddr *)&addr, sizeof(addr)) < 0) {
		perror("bind");
		return 1;
	}
}
